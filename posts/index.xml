<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on MaZiYo's Blog</title><link>https://dmaziyo.github.io/posts/</link><description>Recent content in Posts on MaZiYo's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 Nov 2023 15:13:53 +0800</lastBuildDate><atom:link href="https://dmaziyo.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>如何从一个视频教程中去学习</title><link>https://dmaziyo.github.io/posts/learn-effectively-from-program-tutorial/</link><pubDate>Mon, 27 Nov 2023 15:13:53 +0800</pubDate><guid>https://dmaziyo.github.io/posts/learn-effectively-from-program-tutorial/</guid><description>工欲善其事，必先利其器 在学习一个教学项目视频，逐行敲打的同时，同时启动另外一个项目，而这个项目的内容必须与第一个项目有所不同，可以是ui不同，或者数据库建模不同，亦或者是新的功能和逻辑判断，只是单纯的照抄教程的代码，没有任何思考和修改，这基本与复制无异
在没有完全懂，或者是赶需求的情况下，不要去复制粘贴代码
在看教程的时候，先看时间线的内容，自己先预想一下如何实现，再去敲打
当学习时感到不舒适时，就意味着大脑在真的学习一些东西，真的在思考了，如果很舒适的话，反而意味着要么是复制粘贴，或者已经学过了。
不要去背代码，就如同背英文单词一样，人不是机器，真正应该做的是去理解代码做了什么，记住那些模式，机器才是帮我们存储记忆的地方，比如居中一个元素，记住居中这个思想，然后去搜索。或者做一个表单校验，而不是记住什么form，useForm这种一系列具体的步骤
在学习完一个知识后，内化它，可以是写博客，或者上述那样另开一个项目，以及讲述给别人听。需要注意的是，当写博客或者开新项目的时候，必须有自己的输出，代码有自己的风格，如果只是复制粘贴，那将毫无意义。
看视频学习很容易陷入两种情况(就我而言)，一种是看剧心态，刷完=学完，另一种是看着看着，发现看不懂，太难啦！，就不看了！我们需要注意的就是在看视频的过程中时刻牢记最终的目标是学习新东西，而不是刷完，以及遇到问题学会去分解成小问题</description></item><item><title>[github-issues]element-plus menu组件隐藏功能</title><link>https://dmaziyo.github.io/posts/elements-plus-issue-14738/</link><pubDate>Tue, 07 Nov 2023 14:24:33 +0800</pubDate><guid>https://dmaziyo.github.io/posts/elements-plus-issue-14738/</guid><description>起因：不知道干啥，所以想尝试通过给开源社区贡献微薄之力来提升自己的一些技术水平(做issues，感觉跟刷leetcode似的，不过更有意思一点)
目标:修复问题[issues#14738]
Steps
一开始无从下手，索性就直接询问chatgpt，而gpt老师给出的解决方案是提供一个collapse-on-click-outside属性，然后使用window函数监听是否点击了menu以外的元素，然后关闭即可。 于是乎就写了这么个监听函数在绑定事件在menu上，但是后面发现出现下拉框的menu是sub-menu组件，原来一开始方向就错了🤡 后来又一看issues，发现已经有人提pr了🤡🤡，不过这也是很好的机会，可以学习一下别人的代码 看了别人写的代码中用到了一个经常听到但是从未去了解过的库，也就是vueuse，发现里面提供了一个已经写好了的工具类，叫做onClickOutside 我就想着去看看这个onClickOutside的源码长啥样,结果一看，发现看不太明白，但好在通过查看commit历史记录看到了最简单mvp，所以打算学习一下这个utils。 demo关键部分在于event.composedPath(),这个api能够返回一个数组，该数据包含了当前事件会被传播到的所有元素。只要判断这个数组是否存在我们目标元素即可。</description></item><item><title>创建一个vue组件发布至npm</title><link>https://dmaziyo.github.io/posts/component-library/</link><pubDate>Fri, 27 Oct 2023 11:33:55 +0800</pubDate><guid>https://dmaziyo.github.io/posts/component-library/</guid><description>本次笔记的原则：
创建基于成果的任务 写下要做的行动 记录执行过程中遇到的问题和思考 目标:发布一个能够展示上传图片的组件至npm上，并且能够在其他项目中使用
Steps
1.使用vue-cli初始化项目
2.实现能够上传图片并显示的组件
&amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;special-upload&amp;#34;&amp;gt; &amp;lt;h2&amp;gt;File Uploader&amp;lt;/h2&amp;gt; &amp;lt;input type=&amp;#34;file&amp;#34; @change=&amp;#34;loadFile&amp;#34; accept=&amp;#34;image/*&amp;#34; &amp;gt; &amp;lt;img ref=&amp;#34;output&amp;#34; width=&amp;#34;200&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { name:&amp;#34;SpecialUpload&amp;#34;, data() { return { } }, methods: { loadFile(event){ this.$refs.output.src = URL.createObjectURL(event.target.files[0]) } }, } &amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; .special-upload { width: 300px; height: 400px; border: 1px solid black; text-align: center; } &amp;lt;/style&amp;gt; 3.使用vue-cli来实现打包配置
遇到的问题：
在其他项目中使用打包后的js文件报错，关闭eslint解决，我一开始还以为是不支持使用umd,一开始无法使用可能是因为打包的时候出现了冗余的代码吧 //在package.json配置，使用脚手架提供的内置打包配置 &amp;#34;build-lib&amp;#34;:&amp;#34;vue-cli-service build --target lib --name special-upload ./src/index.js&amp;#34;, 2.</description></item><item><title>浅入Github Action</title><link>https://dmaziyo.github.io/posts/github-action/</link><pubDate>Sat, 21 Oct 2023 10:04:48 +0800</pubDate><guid>https://dmaziyo.github.io/posts/github-action/</guid><description>背景：因为第一次部署博客在GitHub上，想要实现自动化更新部署，但是由于不熟悉GitHub actions，所以写下本篇浅入一下。
一、什么是Github actions? 简单来说，就是由GitHub作为平台提供给开发者自动化工作流的方案，其中比较常见的工作流就是CI/CD
二、常见的工作流有哪些？ 用户提交issue -&amp;gt; 检测是否重要/次要 -&amp;gt; 是否可重现 -&amp;gt;分配给相应的contributer 提交pull request -&amp;gt; review code -&amp;gt; 合并分支 合并分支 -&amp;gt; 测试 -&amp;gt; 构建 -&amp;gt;部署 而action的出现就是为了自动化上述操作。 三、Github actions的工作原理 事件监听-&amp;gt;执行工作流 四、为什么选择Github actions? 代码大部分时间是部署在GitHub上的，所以无需接入其他第三方CI/CD tool 不需要去手动安装环境，可以自定义指定环境版本 GitHub提供了一个官方市场，可以复用其他人的actions 五、workflow文件语法 name: Greeting from Mona #定义workflow名称，可选参数 # 定义trigger event on: push: branches:[ master ] pull_request: branches:[ master ] jobs: my-job: name: My Job runs-on: ubuntu-latest #指定运行的虚拟机环境 steps: - name: Print a greeting # 指定环境变量 env: MY_VAR: Hi there!</description></item></channel></rss>